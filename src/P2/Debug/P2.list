
P2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000060c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007b4  080007bc  000107bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007b4  080007b4  000107bc  2**0
                  CONTENTS
  4 .ARM          00000000  080007b4  080007b4  000107bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007b4  080007bc  000107bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007b4  080007b4  000107b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007b8  080007b8  000107b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007bc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007bc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000107bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000082a  00000000  00000000  000107ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001fe  00000000  00000000  00011016  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c8  00000000  00000000  00011218  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  000112e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001428  00000000  00000000  00011380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000009fb  00000000  00000000  000127a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000514c  00000000  00000000  000131a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000182ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000260  00000000  00000000  0001836c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800079c 	.word	0x0800079c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800079c 	.word	0x0800079c

080001e8 <delay>:
		asm("nop");
	}

}

void delay(){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 1000000; ++i) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e003      	b.n	80001fc <delay+0x14>
			asm("nop");
 80001f4:	bf00      	nop
	for (uint32_t i = 0; i < 1000000; ++i) {
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	3301      	adds	r3, #1
 80001fa:	607b      	str	r3, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d9f7      	bls.n	80001f4 <delay+0xc>
		}

}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	000f423f 	.word	0x000f423f

08000214 <EXTI0_IRQHandler>:

//HANDLING IRQ FOR USER BUTTON
void EXTI0_IRQHandler(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_0); //CLEAR PA FOR USER_BUTTON PA0
 8000218:	2000      	movs	r0, #0
 800021a:	f000 fa51 	bl	80006c0 <GPIO_IRQHandling>
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <main>:



int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	; 0x40
 8000228:	af00      	add	r7, sp, #0


	GPIO_Handle_t led_1;
	GPIO_PinConfig_t led_1_pin_config;
	led_1_pin_config.GPIO_PinMode = GPIO_MODE_OUT;
 800022a:	2301      	movs	r3, #1
 800022c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	led_1_pin_config.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000230:	2305      	movs	r3, #5
 8000232:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	led_1_pin_config.GPIO_PinOPType = GPIO_OP_TYPE_PP; //?
 8000236:	2300      	movs	r3, #0
 8000238:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	led_1_pin_config.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800023c:	2300      	movs	r3, #0
 800023e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	led_1_pin_config.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000242:	2300      	movs	r3, #0
 8000244:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	led_1.GPIO_PinConfig = led_1_pin_config;
 8000248:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800024c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000254:	6018      	str	r0, [r3, #0]
 8000256:	3304      	adds	r3, #4
 8000258:	7019      	strb	r1, [r3, #0]
	led_1.pGPIOx = GPIOB_BASEADDR;
 800025a:	4b32      	ldr	r3, [pc, #200]	; (8000324 <main+0x100>)
 800025c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_Init(&led_1);
 800025e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f948 	bl	80004f8 <GPIO_Init>

	GPIO_Handle_t led_2;
	GPIO_PinConfig_t led_2_pin_config;
	led_2_pin_config.GPIO_PinMode = GPIO_MODE_OUT;
 8000268:	2301      	movs	r3, #1
 800026a:	767b      	strb	r3, [r7, #25]
	led_2_pin_config.GPIO_PinNumber = GPIO_PIN_NO_7;
 800026c:	2307      	movs	r3, #7
 800026e:	763b      	strb	r3, [r7, #24]
	led_2_pin_config.GPIO_PinOPType = GPIO_OP_TYPE_PP; //?
 8000270:	2300      	movs	r3, #0
 8000272:	773b      	strb	r3, [r7, #28]
	led_2_pin_config.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000274:	2300      	movs	r3, #0
 8000276:	76fb      	strb	r3, [r7, #27]
	led_2_pin_config.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000278:	2300      	movs	r3, #0
 800027a:	76bb      	strb	r3, [r7, #26]
	led_2.GPIO_PinConfig = led_2_pin_config;
 800027c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000280:	f107 0218 	add.w	r2, r7, #24
 8000284:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000288:	6018      	str	r0, [r3, #0]
 800028a:	3304      	adds	r3, #4
 800028c:	7019      	strb	r1, [r3, #0]
	led_2.pGPIOx = GPIOB_BASEADDR;
 800028e:	4b25      	ldr	r3, [pc, #148]	; (8000324 <main+0x100>)
 8000290:	623b      	str	r3, [r7, #32]
	GPIO_Init(&led_2);
 8000292:	f107 0320 	add.w	r3, r7, #32
 8000296:	4618      	mov	r0, r3
 8000298:	f000 f92e 	bl	80004f8 <GPIO_Init>

	GPIO_Handle_t led_3;
	GPIO_PinConfig_t led_3_pin_config;
	led_3_pin_config.GPIO_PinMode = GPIO_MODE_OUT;
 800029c:	2301      	movs	r3, #1
 800029e:	717b      	strb	r3, [r7, #5]
	led_3_pin_config.GPIO_PinNumber = GPIO_PIN_NO_9;
 80002a0:	2309      	movs	r3, #9
 80002a2:	713b      	strb	r3, [r7, #4]
	led_3_pin_config.GPIO_PinOPType = GPIO_OP_TYPE_PP; //?
 80002a4:	2300      	movs	r3, #0
 80002a6:	723b      	strb	r3, [r7, #8]
	led_3_pin_config.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a8:	2300      	movs	r3, #0
 80002aa:	71fb      	strb	r3, [r7, #7]
	led_3_pin_config.GPIO_PinSpeed = GPIO_SPEED_LOW;
 80002ac:	2300      	movs	r3, #0
 80002ae:	71bb      	strb	r3, [r7, #6]
	led_3.GPIO_PinConfig = led_2_pin_config;
 80002b0:	f107 0310 	add.w	r3, r7, #16
 80002b4:	f107 0218 	add.w	r2, r7, #24
 80002b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002bc:	6018      	str	r0, [r3, #0]
 80002be:	3304      	adds	r3, #4
 80002c0:	7019      	strb	r1, [r3, #0]
	led_3.pGPIOx = GPIOB_BASEADDR;
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <main+0x100>)
 80002c4:	60fb      	str	r3, [r7, #12]
	GPIO_Init(&led_3);
 80002c6:	f107 030c 	add.w	r3, r7, #12
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f914 	bl	80004f8 <GPIO_Init>


	 for (;;){
		GPIO_WriteToOutputPin(&led_1, GPIO_PIN_SET);
 80002d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002d4:	2101      	movs	r1, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f9c6 	bl	8000668 <GPIO_WriteToOutputPin>
		GPIO_WriteToOutputPin(&led_2, GPIO_PIN_SET);
 80002dc:	f107 0320 	add.w	r3, r7, #32
 80002e0:	2101      	movs	r1, #1
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 f9c0 	bl	8000668 <GPIO_WriteToOutputPin>
		GPIO_WriteToOutputPin(&led_3, GPIO_PIN_SET);
 80002e8:	f107 030c 	add.w	r3, r7, #12
 80002ec:	2101      	movs	r1, #1
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 f9ba 	bl	8000668 <GPIO_WriteToOutputPin>
		delay();
 80002f4:	f7ff ff78 	bl	80001e8 <delay>
		GPIO_WriteToOutputPin(&led_1, GPIO_PIN_SET);
 80002f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002fc:	2101      	movs	r1, #1
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f9b2 	bl	8000668 <GPIO_WriteToOutputPin>
				GPIO_WriteToOutputPin(&led_2, GPIO_PIN_RESET);
 8000304:	f107 0320 	add.w	r3, r7, #32
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f000 f9ac 	bl	8000668 <GPIO_WriteToOutputPin>
				GPIO_WriteToOutputPin(&led_3, GPIO_PIN_SET);
 8000310:	f107 030c 	add.w	r3, r7, #12
 8000314:	2101      	movs	r1, #1
 8000316:	4618      	mov	r0, r3
 8000318:	f000 f9a6 	bl	8000668 <GPIO_WriteToOutputPin>
				delay();
 800031c:	f7ff ff64 	bl	80001e8 <delay>
		GPIO_WriteToOutputPin(&led_1, GPIO_PIN_SET);
 8000320:	e7d6      	b.n	80002d0 <main+0xac>
 8000322:	bf00      	nop
 8000324:	40020400 	.word	0x40020400

08000328 <GPIO_PeriClockControl>:

#include "stm32f407xx_gpio_driver.h"
#include "stm32f407xx.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	460b      	mov	r3, r1
 8000332:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000334:	78fb      	ldrb	r3, [r7, #3]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d162      	bne.n	8000400 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a64      	ldr	r2, [pc, #400]	; (80004d0 <GPIO_PeriClockControl+0x1a8>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000342:	4b64      	ldr	r3, [pc, #400]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000346:	4a63      	ldr	r2, [pc, #396]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 800034e:	e0b9      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a61      	ldr	r2, [pc, #388]	; (80004d8 <GPIO_PeriClockControl+0x1b0>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000358:	4b5e      	ldr	r3, [pc, #376]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	4a5d      	ldr	r2, [pc, #372]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 800035e:	f043 0302 	orr.w	r3, r3, #2
 8000362:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000364:	e0ae      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a5c      	ldr	r2, [pc, #368]	; (80004dc <GPIO_PeriClockControl+0x1b4>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800036e:	4b59      	ldr	r3, [pc, #356]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a58      	ldr	r2, [pc, #352]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 8000374:	f043 0304 	orr.w	r3, r3, #4
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037a:	e0a3      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a58      	ldr	r2, [pc, #352]	; (80004e0 <GPIO_PeriClockControl+0x1b8>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000384:	4b53      	ldr	r3, [pc, #332]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a52      	ldr	r2, [pc, #328]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 800038a:	f043 0308 	orr.w	r3, r3, #8
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000390:	e098      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a53      	ldr	r2, [pc, #332]	; (80004e4 <GPIO_PeriClockControl+0x1bc>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800039a:	4b4e      	ldr	r3, [pc, #312]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	4a4d      	ldr	r2, [pc, #308]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 80003a0:	f043 0310 	orr.w	r3, r3, #16
 80003a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a6:	e08d      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a4f      	ldr	r2, [pc, #316]	; (80004e8 <GPIO_PeriClockControl+0x1c0>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003b0:	4b48      	ldr	r3, [pc, #288]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a47      	ldr	r2, [pc, #284]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 80003b6:	f043 0320 	orr.w	r3, r3, #32
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003bc:	e082      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a4a      	ldr	r2, [pc, #296]	; (80004ec <GPIO_PeriClockControl+0x1c4>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003c6:	4b43      	ldr	r3, [pc, #268]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a42      	ldr	r2, [pc, #264]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d2:	e077      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a46      	ldr	r2, [pc, #280]	; (80004f0 <GPIO_PeriClockControl+0x1c8>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003dc:	4b3d      	ldr	r3, [pc, #244]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	4a3c      	ldr	r2, [pc, #240]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e8:	e06c      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a41      	ldr	r2, [pc, #260]	; (80004f4 <GPIO_PeriClockControl+0x1cc>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d168      	bne.n	80004c4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003f2:	4b38      	ldr	r3, [pc, #224]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	4a37      	ldr	r2, [pc, #220]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 80003f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fe:	e061      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a33      	ldr	r2, [pc, #204]	; (80004d0 <GPIO_PeriClockControl+0x1a8>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000408:	4b32      	ldr	r3, [pc, #200]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 800040a:	691b      	ldr	r3, [r3, #16]
 800040c:	4a31      	ldr	r2, [pc, #196]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 800040e:	f023 0301 	bic.w	r3, r3, #1
 8000412:	6113      	str	r3, [r2, #16]
}
 8000414:	e056      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a2f      	ldr	r2, [pc, #188]	; (80004d8 <GPIO_PeriClockControl+0x1b0>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800041e:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 8000420:	691b      	ldr	r3, [r3, #16]
 8000422:	4a2c      	ldr	r2, [pc, #176]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 8000424:	f023 0302 	bic.w	r3, r3, #2
 8000428:	6113      	str	r3, [r2, #16]
}
 800042a:	e04b      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a2b      	ldr	r2, [pc, #172]	; (80004dc <GPIO_PeriClockControl+0x1b4>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000434:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 8000436:	691b      	ldr	r3, [r3, #16]
 8000438:	4a26      	ldr	r2, [pc, #152]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 800043a:	f023 0304 	bic.w	r3, r3, #4
 800043e:	6113      	str	r3, [r2, #16]
}
 8000440:	e040      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a26      	ldr	r2, [pc, #152]	; (80004e0 <GPIO_PeriClockControl+0x1b8>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800044a:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 800044c:	691b      	ldr	r3, [r3, #16]
 800044e:	4a21      	ldr	r2, [pc, #132]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 8000450:	f023 0308 	bic.w	r3, r3, #8
 8000454:	6113      	str	r3, [r2, #16]
}
 8000456:	e035      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a22      	ldr	r2, [pc, #136]	; (80004e4 <GPIO_PeriClockControl+0x1bc>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000460:	4b1c      	ldr	r3, [pc, #112]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 8000466:	f023 0310 	bic.w	r3, r3, #16
 800046a:	6113      	str	r3, [r2, #16]
}
 800046c:	e02a      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a1d      	ldr	r2, [pc, #116]	; (80004e8 <GPIO_PeriClockControl+0x1c0>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000476:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 8000478:	691b      	ldr	r3, [r3, #16]
 800047a:	4a16      	ldr	r2, [pc, #88]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 800047c:	f023 0320 	bic.w	r3, r3, #32
 8000480:	6113      	str	r3, [r2, #16]
}
 8000482:	e01f      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a19      	ldr	r2, [pc, #100]	; (80004ec <GPIO_PeriClockControl+0x1c4>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4a10      	ldr	r2, [pc, #64]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 8000492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000496:	6113      	str	r3, [r2, #16]
}
 8000498:	e014      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <GPIO_PeriClockControl+0x1c8>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 80004a4:	691b      	ldr	r3, [r3, #16]
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 80004a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004ac:	6113      	str	r3, [r2, #16]
}
 80004ae:	e009      	b.n	80004c4 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a10      	ldr	r2, [pc, #64]	; (80004f4 <GPIO_PeriClockControl+0x1cc>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d105      	bne.n	80004c4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 80004ba:	691b      	ldr	r3, [r3, #16]
 80004bc:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <GPIO_PeriClockControl+0x1ac>)
 80004be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004c2:	6113      	str	r3, [r2, #16]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	40020000 	.word	0x40020000
 80004d4:	40023800 	.word	0x40023800
 80004d8:	40020400 	.word	0x40020400
 80004dc:	40020800 	.word	0x40020800
 80004e0:	40020c00 	.word	0x40020c00
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40021400 	.word	0x40021400
 80004ec:	40021800 	.word	0x40021800
 80004f0:	40021c00 	.word	0x40021c00
 80004f4:	40022000 	.word	0x40022000

080004f8 <GPIO_Init>:



// Implementieren Sie die weiteren Schritte. Denken Sie daran die Einträge eines Registers zurückzusetzen, bevor Sie einzelne Bits setzen
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	 //Anschalten der Clock
	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2101      	movs	r1, #1
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff ff0e 	bl	8000328 <GPIO_PeriClockControl>


	 //Konfigurieren des OUTPUT-Modus
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	795b      	ldrb	r3, [r3, #5]
 8000510:	2b03      	cmp	r3, #3
 8000512:	d827      	bhi.n	8000564 <GPIO_Init+0x6c>
	 {
		 //RESET MODE REG =  INPUT
		 pGPIOHandle->pGPIOx->MODE_REG &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)) & ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) + 1);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	2101      	movs	r1, #1
 8000522:	4099      	lsls	r1, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	3301      	adds	r3, #1
 800052c:	2001      	movs	r0, #1
 800052e:	fa00 f303 	lsl.w	r3, r0, r3
 8000532:	430b      	orrs	r3, r1
 8000534:	43db      	mvns	r3, r3
 8000536:	4619      	mov	r1, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	400a      	ands	r2, r1
 800053e:	601a      	str	r2, [r3, #0]

		 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d10d      	bne.n	8000564 <GPIO_Init+0x6c>
			 {
			 pGPIOHandle->pGPIOx->MODE_REG |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber*2));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	791b      	ldrb	r3, [r3, #4]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	2101      	movs	r1, #1
 8000556:	fa01 f303 	lsl.w	r3, r1, r3
 800055a:	4619      	mov	r1, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	430a      	orrs	r2, r1
 8000562:	601a      	str	r2, [r3, #0]
	 }


	 //Konfigurieren des Output-Speeds
	 //RESET SPEED REGISTER TO DEFAULT
	 pGPIOHandle->pGPIOx->OUTPUT_SPEED &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)) & ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)+1);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	689a      	ldr	r2, [r3, #8]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	2101      	movs	r1, #1
 8000572:	4099      	lsls	r1, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	791b      	ldrb	r3, [r3, #4]
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	3301      	adds	r3, #1
 800057c:	2001      	movs	r0, #1
 800057e:	fa00 f303 	lsl.w	r3, r0, r3
 8000582:	430b      	orrs	r3, r1
 8000584:	43db      	mvns	r3, r3
 8000586:	4619      	mov	r1, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	400a      	ands	r2, r1
 800058e:	609a      	str	r2, [r3, #8]

	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed & 0b01){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	799b      	ldrb	r3, [r3, #6]
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00d      	beq.n	80005b8 <GPIO_Init+0xc0>
		 pGPIOHandle->pGPIOx->OUTPUT_SPEED |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)); //SPEED LOW BIT
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	689a      	ldr	r2, [r3, #8]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	2101      	movs	r1, #1
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	430a      	orrs	r2, r1
 80005b6:	609a      	str	r2, [r3, #8]
	 }
	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed & 0b10)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	799b      	ldrb	r3, [r3, #6]
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d00e      	beq.n	80005e2 <GPIO_Init+0xea>
	 {
		 pGPIOHandle->pGPIOx->OUTPUT_SPEED |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)+1); //SPEED HIGH BIT
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	689a      	ldr	r2, [r3, #8]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	3301      	adds	r3, #1
 80005d2:	2101      	movs	r1, #1
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	430a      	orrs	r2, r1
 80005e0:	609a      	str	r2, [r3, #8]
	 }

	 //Konfigurieren des Pull-up/down Settings
	 //RESET PULL_UP_DOWN
	 pGPIOHandle->pGPIOx->PULL_UP_DOWN &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)) & ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) + 1);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	68da      	ldr	r2, [r3, #12]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	2101      	movs	r1, #1
 80005f0:	4099      	lsls	r1, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	3301      	adds	r3, #1
 80005fa:	2001      	movs	r0, #1
 80005fc:	fa00 f303 	lsl.w	r3, r0, r3
 8000600:	430b      	orrs	r3, r1
 8000602:	43db      	mvns	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	400a      	ands	r2, r1
 800060c:	60da      	str	r2, [r3, #12]

	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl & 0b01)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	79db      	ldrb	r3, [r3, #7]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00d      	beq.n	8000636 <GPIO_Init+0x13e>
	 {
		 pGPIOHandle->pGPIOx->PULL_UP_DOWN |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)); //PUD LOW BIT
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	68da      	ldr	r2, [r3, #12]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	791b      	ldrb	r3, [r3, #4]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	2101      	movs	r1, #1
 8000628:	fa01 f303 	lsl.w	r3, r1, r3
 800062c:	4619      	mov	r1, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	430a      	orrs	r2, r1
 8000634:	60da      	str	r2, [r3, #12]
	 }
	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl & 0b10)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	79db      	ldrb	r3, [r3, #7]
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00e      	beq.n	8000660 <GPIO_Init+0x168>
	 {
		 pGPIOHandle->pGPIOx->PULL_UP_DOWN |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) + 1); //PUD HIGH BIT
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	68da      	ldr	r2, [r3, #12]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	3301      	adds	r3, #1
 8000650:	2101      	movs	r1, #1
 8000652:	fa01 f303 	lsl.w	r3, r1, r3
 8000656:	4619      	mov	r1, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	430a      	orrs	r2, r1
 800065e:	60da      	str	r2, [r3, #12]
	 }


	 
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <GPIO_WriteToOutputPin>:
	return (uint16_t)(pGPIOx->INPUT_DATA_REG & 0xFFFF); //RETURN ONLY THE LOWER 16BIT
}

// Implementieren Sie die Funktionalität
void GPIO_WriteToOutputPin(GPIO_Handle_t *pGPIO_Handle, uint8_t Value)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
	if (Value){
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00d      	beq.n	8000696 <GPIO_WriteToOutputPin+0x2e>
		pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG |= (1 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	4619      	mov	r1, r3
 8000686:	2301      	movs	r3, #1
 8000688:	408b      	lsls	r3, r1
 800068a:	4619      	mov	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	430a      	orrs	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
	}else{
		pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG &= ~(1 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
	}
}
 8000694:	e00d      	b.n	80006b2 <GPIO_WriteToOutputPin+0x4a>
		pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG &= ~(1 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	4619      	mov	r1, r3
 80006a2:	2301      	movs	r3, #1
 80006a4:	408b      	lsls	r3, r1
 80006a6:	43db      	mvns	r3, r3
 80006a8:	4619      	mov	r1, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	400a      	ands	r2, r1
 80006b0:	615a      	str	r2, [r3, #20]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <GPIO_IRQHandling>:
	}

}

void GPIO_IRQHandling(uint8_t PinNumber)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
	// Abfrage und zurücksetzen des EXTI-PR bits
	if(EXTI->PR & ( 1 << PinNumber))
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <GPIO_IRQHandling+0x3c>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	2101      	movs	r1, #1
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	4013      	ands	r3, r2
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d009      	beq.n	80006f0 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <GPIO_IRQHandling+0x3c>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	79fa      	ldrb	r2, [r7, #7]
 80006e2:	2101      	movs	r1, #1
 80006e4:	fa01 f202 	lsl.w	r2, r1, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <GPIO_IRQHandling+0x3c>)
 80006ec:	430b      	orrs	r3, r1
 80006ee:	6153      	str	r3, [r2, #20]
	}

}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40013c00 	.word	0x40013c00

08000700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000702:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <LoopForever+0x6>)
  ldr r1, =_edata
 8000706:	490e      	ldr	r1, [pc, #56]	; (8000740 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000708:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <LoopForever+0xe>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <LoopForever+0x12>)
  ldr r4, =_ebss
 800071c:	4c0b      	ldr	r4, [pc, #44]	; (800074c <LoopForever+0x16>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800072a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800072e:	f000 f811 	bl	8000754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff fd77 	bl	8000224 <main>

08000736 <LoopForever>:

LoopForever:
    b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   r0, =_estack
 8000738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000744:	080007bc 	.word	0x080007bc
  ldr r2, =_sbss
 8000748:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800074c:	2000001c 	.word	0x2000001c

08000750 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC_IRQHandler>
	...

08000754 <__libc_init_array>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	4e0d      	ldr	r6, [pc, #52]	; (800078c <__libc_init_array+0x38>)
 8000758:	4c0d      	ldr	r4, [pc, #52]	; (8000790 <__libc_init_array+0x3c>)
 800075a:	1ba4      	subs	r4, r4, r6
 800075c:	10a4      	asrs	r4, r4, #2
 800075e:	2500      	movs	r5, #0
 8000760:	42a5      	cmp	r5, r4
 8000762:	d109      	bne.n	8000778 <__libc_init_array+0x24>
 8000764:	4e0b      	ldr	r6, [pc, #44]	; (8000794 <__libc_init_array+0x40>)
 8000766:	4c0c      	ldr	r4, [pc, #48]	; (8000798 <__libc_init_array+0x44>)
 8000768:	f000 f818 	bl	800079c <_init>
 800076c:	1ba4      	subs	r4, r4, r6
 800076e:	10a4      	asrs	r4, r4, #2
 8000770:	2500      	movs	r5, #0
 8000772:	42a5      	cmp	r5, r4
 8000774:	d105      	bne.n	8000782 <__libc_init_array+0x2e>
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800077c:	4798      	blx	r3
 800077e:	3501      	adds	r5, #1
 8000780:	e7ee      	b.n	8000760 <__libc_init_array+0xc>
 8000782:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000786:	4798      	blx	r3
 8000788:	3501      	adds	r5, #1
 800078a:	e7f2      	b.n	8000772 <__libc_init_array+0x1e>
 800078c:	080007b4 	.word	0x080007b4
 8000790:	080007b4 	.word	0x080007b4
 8000794:	080007b4 	.word	0x080007b4
 8000798:	080007b8 	.word	0x080007b8

0800079c <_init>:
 800079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079e:	bf00      	nop
 80007a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007a2:	bc08      	pop	{r3}
 80007a4:	469e      	mov	lr, r3
 80007a6:	4770      	bx	lr

080007a8 <_fini>:
 80007a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007aa:	bf00      	nop
 80007ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ae:	bc08      	pop	{r3}
 80007b0:	469e      	mov	lr, r3
 80007b2:	4770      	bx	lr
