
P2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000504  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006ac  080006b4  000106b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006ac  080006ac  000106b4  2**0
                  CONTENTS
  4 .ARM          00000000  080006ac  080006ac  000106b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006ac  080006b4  000106b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006ac  080006ac  000106ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006b0  080006b0  000106b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006b4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000106b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000075e  00000000  00000000  000106e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001bd  00000000  00000000  00010e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b8  00000000  00000000  00011000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000090  00000000  00000000  000110b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001411  00000000  00000000  00011148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000009a1  00000000  00000000  00012559  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005084  00000000  00000000  00012efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00017f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000021c  00000000  00000000  00017ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000694 	.word	0x08000694

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000694 	.word	0x08000694

080001e8 <delay>:

#include "stm32f407xx_gpio_driver.h"



void delay(){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0

	for (uint32_t i = 0; i < 500000; ++i) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e003      	b.n	80001fc <delay+0x14>
		asm("nop");
 80001f4:	bf00      	nop
	for (uint32_t i = 0; i < 500000; ++i) {
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	3301      	adds	r3, #1
 80001fa:	607b      	str	r3, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d9f7      	bls.n	80001f4 <delay+0xc>
	}

}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	0007a11f 	.word	0x0007a11f

08000214 <main>:
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t led_1;
	GPIO_PinConfig_t led_1_pin_config;

	led_1_pin_config.GPIO_PinMode = GPIO_MODE_OUT;
 800021a:	2301      	movs	r3, #1
 800021c:	717b      	strb	r3, [r7, #5]
	led_1_pin_config.GPIO_PinNumber = GPIO_PIN_NO_0;
 800021e:	2300      	movs	r3, #0
 8000220:	713b      	strb	r3, [r7, #4]
	led_1_pin_config.GPIO_PinOPType = GPIO_OP_TYPE_PP; //?
 8000222:	2300      	movs	r3, #0
 8000224:	723b      	strb	r3, [r7, #8]
	led_1_pin_config.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000226:	2300      	movs	r3, #0
 8000228:	71fb      	strb	r3, [r7, #7]
	led_1_pin_config.GPIO_PinSpeed = GPIO_SPEED_LOW;
 800022a:	2300      	movs	r3, #0
 800022c:	71bb      	strb	r3, [r7, #6]

	led_1.GPIO_PinConfig = led_1_pin_config;
 800022e:	f107 0310 	add.w	r3, r7, #16
 8000232:	1d3a      	adds	r2, r7, #4
 8000234:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000238:	6018      	str	r0, [r3, #0]
 800023a:	3304      	adds	r3, #4
 800023c:	7019      	strb	r1, [r3, #0]
	led_1.pGPIOx = GPIOH_BASEADDR;
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <main+0x5c>)
 8000240:	60fb      	str	r3, [r7, #12]

	GPIO_Init(&led_1);
 8000242:	f107 030c 	add.w	r3, r7, #12
 8000246:	4618      	mov	r0, r3
 8000248:	f000 f8fc 	bl	8000444 <GPIO_Init>

	
	
	 for (;;)
	{
		GPIO_WriteToOutputPin(&led_1, GPIO_PIN_RESET);
 800024c:	f107 030c 	add.w	r3, r7, #12
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f9a4 	bl	80005a0 <GPIO_WriteToOutputPin>
		delay();
 8000258:	f7ff ffc6 	bl	80001e8 <delay>
		GPIO_WriteToOutputPin(&led_1, GPIO_PIN_SET);
 800025c:	f107 030c 	add.w	r3, r7, #12
 8000260:	2101      	movs	r1, #1
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f99c 	bl	80005a0 <GPIO_WriteToOutputPin>
		delay();
 8000268:	f7ff ffbe 	bl	80001e8 <delay>
		GPIO_WriteToOutputPin(&led_1, GPIO_PIN_RESET);
 800026c:	e7ee      	b.n	800024c <main+0x38>
 800026e:	bf00      	nop
 8000270:	40021c00 	.word	0x40021c00

08000274 <GPIO_PeriClockControl>:

#include "stm32f407xx_gpio_driver.h"
#include "stm32f407xx.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000280:	78fb      	ldrb	r3, [r7, #3]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d162      	bne.n	800034c <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	4a64      	ldr	r2, [pc, #400]	; (800041c <GPIO_PeriClockControl+0x1a8>)
 800028a:	4293      	cmp	r3, r2
 800028c:	d106      	bne.n	800029c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800028e:	4b64      	ldr	r3, [pc, #400]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 8000290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000292:	4a63      	ldr	r2, [pc, #396]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	62d3      	str	r3, [r2, #44]	; 0x2c
		{
			GPIOI_PCLK_DI();
		}
	}

}
 800029a:	e0b9      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4a61      	ldr	r2, [pc, #388]	; (8000424 <GPIO_PeriClockControl+0x1b0>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d106      	bne.n	80002b2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002a4:	4b5e      	ldr	r3, [pc, #376]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80002a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002a8:	4a5d      	ldr	r2, [pc, #372]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80002aa:	f043 0302 	orr.w	r3, r3, #2
 80002ae:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80002b0:	e0ae      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a5c      	ldr	r2, [pc, #368]	; (8000428 <GPIO_PeriClockControl+0x1b4>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d106      	bne.n	80002c8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002ba:	4b59      	ldr	r3, [pc, #356]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80002bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002be:	4a58      	ldr	r2, [pc, #352]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80002c0:	f043 0304 	orr.w	r3, r3, #4
 80002c4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80002c6:	e0a3      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a58      	ldr	r2, [pc, #352]	; (800042c <GPIO_PeriClockControl+0x1b8>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d106      	bne.n	80002de <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002d0:	4b53      	ldr	r3, [pc, #332]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80002d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002d4:	4a52      	ldr	r2, [pc, #328]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80002d6:	f043 0308 	orr.w	r3, r3, #8
 80002da:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80002dc:	e098      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a53      	ldr	r2, [pc, #332]	; (8000430 <GPIO_PeriClockControl+0x1bc>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80002e6:	4b4e      	ldr	r3, [pc, #312]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80002e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002ea:	4a4d      	ldr	r2, [pc, #308]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80002ec:	f043 0310 	orr.w	r3, r3, #16
 80002f0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80002f2:	e08d      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a4f      	ldr	r2, [pc, #316]	; (8000434 <GPIO_PeriClockControl+0x1c0>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d106      	bne.n	800030a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80002fc:	4b48      	ldr	r3, [pc, #288]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80002fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000300:	4a47      	ldr	r2, [pc, #284]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 8000302:	f043 0320 	orr.w	r3, r3, #32
 8000306:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000308:	e082      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a4a      	ldr	r2, [pc, #296]	; (8000438 <GPIO_PeriClockControl+0x1c4>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000312:	4b43      	ldr	r3, [pc, #268]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 8000314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000316:	4a42      	ldr	r2, [pc, #264]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 8000318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800031c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800031e:	e077      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a46      	ldr	r2, [pc, #280]	; (800043c <GPIO_PeriClockControl+0x1c8>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d106      	bne.n	8000336 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000328:	4b3d      	ldr	r3, [pc, #244]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 800032a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800032c:	4a3c      	ldr	r2, [pc, #240]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 800032e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000332:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000334:	e06c      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a41      	ldr	r2, [pc, #260]	; (8000440 <GPIO_PeriClockControl+0x1cc>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d168      	bne.n	8000410 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800033e:	4b38      	ldr	r3, [pc, #224]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 8000340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000342:	4a37      	ldr	r2, [pc, #220]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 8000344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000348:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800034a:	e061      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a33      	ldr	r2, [pc, #204]	; (800041c <GPIO_PeriClockControl+0x1a8>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000354:	4b32      	ldr	r3, [pc, #200]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 8000356:	691b      	ldr	r3, [r3, #16]
 8000358:	4a31      	ldr	r2, [pc, #196]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 800035a:	f023 0301 	bic.w	r3, r3, #1
 800035e:	6113      	str	r3, [r2, #16]
}
 8000360:	e056      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a2f      	ldr	r2, [pc, #188]	; (8000424 <GPIO_PeriClockControl+0x1b0>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800036a:	4b2d      	ldr	r3, [pc, #180]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 800036c:	691b      	ldr	r3, [r3, #16]
 800036e:	4a2c      	ldr	r2, [pc, #176]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 8000370:	f023 0302 	bic.w	r3, r3, #2
 8000374:	6113      	str	r3, [r2, #16]
}
 8000376:	e04b      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a2b      	ldr	r2, [pc, #172]	; (8000428 <GPIO_PeriClockControl+0x1b4>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000380:	4b27      	ldr	r3, [pc, #156]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 8000382:	691b      	ldr	r3, [r3, #16]
 8000384:	4a26      	ldr	r2, [pc, #152]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 8000386:	f023 0304 	bic.w	r3, r3, #4
 800038a:	6113      	str	r3, [r2, #16]
}
 800038c:	e040      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a26      	ldr	r2, [pc, #152]	; (800042c <GPIO_PeriClockControl+0x1b8>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000396:	4b22      	ldr	r3, [pc, #136]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 8000398:	691b      	ldr	r3, [r3, #16]
 800039a:	4a21      	ldr	r2, [pc, #132]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 800039c:	f023 0308 	bic.w	r3, r3, #8
 80003a0:	6113      	str	r3, [r2, #16]
}
 80003a2:	e035      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a22      	ldr	r2, [pc, #136]	; (8000430 <GPIO_PeriClockControl+0x1bc>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80003ac:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80003ae:	691b      	ldr	r3, [r3, #16]
 80003b0:	4a1b      	ldr	r2, [pc, #108]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80003b2:	f023 0310 	bic.w	r3, r3, #16
 80003b6:	6113      	str	r3, [r2, #16]
}
 80003b8:	e02a      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a1d      	ldr	r2, [pc, #116]	; (8000434 <GPIO_PeriClockControl+0x1c0>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80003c4:	691b      	ldr	r3, [r3, #16]
 80003c6:	4a16      	ldr	r2, [pc, #88]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80003c8:	f023 0320 	bic.w	r3, r3, #32
 80003cc:	6113      	str	r3, [r2, #16]
}
 80003ce:	e01f      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a19      	ldr	r2, [pc, #100]	; (8000438 <GPIO_PeriClockControl+0x1c4>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80003da:	691b      	ldr	r3, [r3, #16]
 80003dc:	4a10      	ldr	r2, [pc, #64]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80003de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003e2:	6113      	str	r3, [r2, #16]
}
 80003e4:	e014      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a14      	ldr	r2, [pc, #80]	; (800043c <GPIO_PeriClockControl+0x1c8>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80003f0:	691b      	ldr	r3, [r3, #16]
 80003f2:	4a0b      	ldr	r2, [pc, #44]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 80003f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003f8:	6113      	str	r3, [r2, #16]
}
 80003fa:	e009      	b.n	8000410 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a10      	ldr	r2, [pc, #64]	; (8000440 <GPIO_PeriClockControl+0x1cc>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d105      	bne.n	8000410 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 8000406:	691b      	ldr	r3, [r3, #16]
 8000408:	4a05      	ldr	r2, [pc, #20]	; (8000420 <GPIO_PeriClockControl+0x1ac>)
 800040a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800040e:	6113      	str	r3, [r2, #16]
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	40020000 	.word	0x40020000
 8000420:	40023800 	.word	0x40023800
 8000424:	40020400 	.word	0x40020400
 8000428:	40020800 	.word	0x40020800
 800042c:	40020c00 	.word	0x40020c00
 8000430:	40021000 	.word	0x40021000
 8000434:	40021400 	.word	0x40021400
 8000438:	40021800 	.word	0x40021800
 800043c:	40021c00 	.word	0x40021c00
 8000440:	40022000 	.word	0x40022000

08000444 <GPIO_Init>:



// Implementieren Sie die weiteren Schritte. Denken Sie daran die Einträge eines Registers zurückzusetzen, bevor Sie einzelne Bits setzen
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	 //Anschalten der Clock
	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2101      	movs	r1, #1
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff0e 	bl	8000274 <GPIO_PeriClockControl>


	 //Konfigurieren des OUTPUT-Modus
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b03      	cmp	r3, #3
 800045e:	d81d      	bhi.n	800049c <GPIO_Init+0x58>
	 {
		 //RESET MODE REG
		 pGPIOHandle->pGPIOx->MODE_REG &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)) & ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) + 1);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	2101      	movs	r1, #1
 800046e:	4099      	lsls	r1, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	791b      	ldrb	r3, [r3, #4]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	3301      	adds	r3, #1
 8000478:	2001      	movs	r0, #1
 800047a:	fa00 f303 	lsl.w	r3, r0, r3
 800047e:	430b      	orrs	r3, r1
 8000480:	43db      	mvns	r3, r3
 8000482:	4619      	mov	r1, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	400a      	ands	r2, r1
 800048a:	601a      	str	r2, [r3, #0]


			 pGPIOHandle->pGPIOx->MODE_REG |= (1 << 0); //PUD LOW BIT
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f042 0201 	orr.w	r2, r2, #1
 800049a:	601a      	str	r2, [r3, #0]
	 }


	 //Konfigurieren des Output-Speeds
	 //RESET SPEED REGISTER TO DEFAULT
	 pGPIOHandle->pGPIOx->OUTPUT_SPEED &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)) & ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)+1);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	689a      	ldr	r2, [r3, #8]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	791b      	ldrb	r3, [r3, #4]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	2101      	movs	r1, #1
 80004aa:	4099      	lsls	r1, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	791b      	ldrb	r3, [r3, #4]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	3301      	adds	r3, #1
 80004b4:	2001      	movs	r0, #1
 80004b6:	fa00 f303 	lsl.w	r3, r0, r3
 80004ba:	430b      	orrs	r3, r1
 80004bc:	43db      	mvns	r3, r3
 80004be:	4619      	mov	r1, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	400a      	ands	r2, r1
 80004c6:	609a      	str	r2, [r3, #8]

	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed & 0b01){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	799b      	ldrb	r3, [r3, #6]
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d00d      	beq.n	80004f0 <GPIO_Init+0xac>
		 pGPIOHandle->pGPIOx->OUTPUT_SPEED |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)); //SPEED LOW BIT
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	689a      	ldr	r2, [r3, #8]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	2101      	movs	r1, #1
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	4619      	mov	r1, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	430a      	orrs	r2, r1
 80004ee:	609a      	str	r2, [r3, #8]
	 }
	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed & 0b10)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	799b      	ldrb	r3, [r3, #6]
 80004f4:	f003 0302 	and.w	r3, r3, #2
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00e      	beq.n	800051a <GPIO_Init+0xd6>
	 {
		 pGPIOHandle->pGPIOx->OUTPUT_SPEED |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)+1); //SPEED HIGH BIT
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	689a      	ldr	r2, [r3, #8]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	3301      	adds	r3, #1
 800050a:	2101      	movs	r1, #1
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	4619      	mov	r1, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	430a      	orrs	r2, r1
 8000518:	609a      	str	r2, [r3, #8]
	 }

	 //Konfigurieren des Pull-up/down Settings
	 //RESET PULL_UP_DOWN
	 pGPIOHandle->pGPIOx->PULL_UP_DOWN &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)) & ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) + 1);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	68da      	ldr	r2, [r3, #12]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	2101      	movs	r1, #1
 8000528:	4099      	lsls	r1, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	3301      	adds	r3, #1
 8000532:	2001      	movs	r0, #1
 8000534:	fa00 f303 	lsl.w	r3, r0, r3
 8000538:	430b      	orrs	r3, r1
 800053a:	43db      	mvns	r3, r3
 800053c:	4619      	mov	r1, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	400a      	ands	r2, r1
 8000544:	60da      	str	r2, [r3, #12]

	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl & 0b01)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	79db      	ldrb	r3, [r3, #7]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d00d      	beq.n	800056e <GPIO_Init+0x12a>
	 {
		 pGPIOHandle->pGPIOx->PULL_UP_DOWN |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)); //PUD LOW BIT
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	2101      	movs	r1, #1
 8000560:	fa01 f303 	lsl.w	r3, r1, r3
 8000564:	4619      	mov	r1, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	430a      	orrs	r2, r1
 800056c:	60da      	str	r2, [r3, #12]
	 }
	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed & 0b10)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	799b      	ldrb	r3, [r3, #6]
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	2b00      	cmp	r3, #0
 8000578:	d00e      	beq.n	8000598 <GPIO_Init+0x154>
	 {
		 pGPIOHandle->pGPIOx->PULL_UP_DOWN |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) + 1); //PUD HIGH BIT
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68da      	ldr	r2, [r3, #12]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	3301      	adds	r3, #1
 8000588:	2101      	movs	r1, #1
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	4619      	mov	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	430a      	orrs	r2, r1
 8000596:	60da      	str	r2, [r3, #12]
	 }

	 //Konfigurieren des Output modus ?????? war doch schon
	 
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <GPIO_WriteToOutputPin>:
	return (uint16_t)(pGPIOx->INPUT_DATA_REG & 0xFFFF); //RETURN ONLY THE LOWER 16BIT
}

// Implementieren Sie die Funktionalität
void GPIO_WriteToOutputPin(GPIO_Handle_t *pGPIO_Handle, uint8_t Value)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	70fb      	strb	r3, [r7, #3]
	if (Value){
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00d      	beq.n	80005ce <GPIO_WriteToOutputPin+0x2e>
		pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG |= (1 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	695a      	ldr	r2, [r3, #20]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	4619      	mov	r1, r3
 80005be:	2301      	movs	r3, #1
 80005c0:	408b      	lsls	r3, r1
 80005c2:	4619      	mov	r1, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
	}else{
		pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG &= ~(1 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
	}
}
 80005cc:	e00d      	b.n	80005ea <GPIO_WriteToOutputPin+0x4a>
		pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG &= ~(1 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	4619      	mov	r1, r3
 80005da:	2301      	movs	r3, #1
 80005dc:	408b      	lsls	r3, r1
 80005de:	43db      	mvns	r3, r3
 80005e0:	4619      	mov	r1, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	400a      	ands	r2, r1
 80005e8:	615a      	str	r2, [r3, #20]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490e      	ldr	r1, [pc, #56]	; (8000638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0e      	ldr	r2, [pc, #56]	; (800063c <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0b      	ldr	r4, [pc, #44]	; (8000644 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000622:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000626:	f000 f811 	bl	800064c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062a:	f7ff fdf3 	bl	8000214 <main>

0800062e <LoopForever>:

LoopForever:
    b LoopForever
 800062e:	e7fe      	b.n	800062e <LoopForever>
  ldr   r0, =_estack
 8000630:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000638:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800063c:	080006b4 	.word	0x080006b4
  ldr r2, =_sbss
 8000640:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000644:	2000001c 	.word	0x2000001c

08000648 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC_IRQHandler>
	...

0800064c <__libc_init_array>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	4e0d      	ldr	r6, [pc, #52]	; (8000684 <__libc_init_array+0x38>)
 8000650:	4c0d      	ldr	r4, [pc, #52]	; (8000688 <__libc_init_array+0x3c>)
 8000652:	1ba4      	subs	r4, r4, r6
 8000654:	10a4      	asrs	r4, r4, #2
 8000656:	2500      	movs	r5, #0
 8000658:	42a5      	cmp	r5, r4
 800065a:	d109      	bne.n	8000670 <__libc_init_array+0x24>
 800065c:	4e0b      	ldr	r6, [pc, #44]	; (800068c <__libc_init_array+0x40>)
 800065e:	4c0c      	ldr	r4, [pc, #48]	; (8000690 <__libc_init_array+0x44>)
 8000660:	f000 f818 	bl	8000694 <_init>
 8000664:	1ba4      	subs	r4, r4, r6
 8000666:	10a4      	asrs	r4, r4, #2
 8000668:	2500      	movs	r5, #0
 800066a:	42a5      	cmp	r5, r4
 800066c:	d105      	bne.n	800067a <__libc_init_array+0x2e>
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000674:	4798      	blx	r3
 8000676:	3501      	adds	r5, #1
 8000678:	e7ee      	b.n	8000658 <__libc_init_array+0xc>
 800067a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800067e:	4798      	blx	r3
 8000680:	3501      	adds	r5, #1
 8000682:	e7f2      	b.n	800066a <__libc_init_array+0x1e>
 8000684:	080006ac 	.word	0x080006ac
 8000688:	080006ac 	.word	0x080006ac
 800068c:	080006ac 	.word	0x080006ac
 8000690:	080006b0 	.word	0x080006b0

08000694 <_init>:
 8000694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000696:	bf00      	nop
 8000698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069a:	bc08      	pop	{r3}
 800069c:	469e      	mov	lr, r3
 800069e:	4770      	bx	lr

080006a0 <_fini>:
 80006a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a2:	bf00      	nop
 80006a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a6:	bc08      	pop	{r3}
 80006a8:	469e      	mov	lr, r3
 80006aa:	4770      	bx	lr
