
P2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000574  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800071c  08000724  00010724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800071c  0800071c  00010724  2**0
                  CONTENTS
  4 .ARM          00000000  0800071c  0800071c  00010724  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800071c  08000724  00010724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800071c  0800071c  0001071c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000720  08000720  00010720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000724  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000724  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010724  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007b7  00000000  00000000  00010754  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001d5  00000000  00000000  00010f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c0  00000000  00000000  000110e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000098  00000000  00000000  000111a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001428  00000000  00000000  00011238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000009b4  00000000  00000000  00012660  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000050fd  00000000  00000000  00013014  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00018111  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000238  00000000  00000000  0001818c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000704 	.word	0x08000704

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000704 	.word	0x08000704

080001e8 <delay>:





void delay(){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0

	for (uint32_t i = 0; i < 500000; ++i) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e003      	b.n	80001fc <delay+0x14>
		asm("nop");
 80001f4:	bf00      	nop
	for (uint32_t i = 0; i < 500000; ++i) {
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	3301      	adds	r3, #1
 80001fa:	607b      	str	r3, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d9f7      	bls.n	80001f4 <delay+0xc>
	}

}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	0007a11f 	.word	0x0007a11f

08000214 <EXTI0_IRQHandler>:
//HANDLING IRQ FOR USER BUTTON
void EXTI0_IRQHandler(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_0); //CLEAR PA FOR USER_BUTTON PA0
 8000218:	2000      	movs	r0, #0
 800021a:	f000 fa05 	bl	8000628 <GPIO_IRQHandling>
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <main>:



int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0
	*((volatile uint32_t*)(AHB1ENR+GPIOBEN)) |=(1 << 3);
 800022a:	4b18      	ldr	r3, [pc, #96]	; (800028c <main+0x68>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a17      	ldr	r2, [pc, #92]	; (800028c <main+0x68>)
 8000230:	f043 0308 	orr.w	r3, r3, #8
 8000234:	6013      	str	r3, [r2, #0]

	GPIO_Handle_t led_1;
	GPIO_PinConfig_t led_1_pin_config;

	led_1_pin_config.GPIO_PinMode = GPIO_MODE_OUT;
 8000236:	2301      	movs	r3, #1
 8000238:	717b      	strb	r3, [r7, #5]
	led_1_pin_config.GPIO_PinNumber = GPIO_PIN_NO_15;
 800023a:	230f      	movs	r3, #15
 800023c:	713b      	strb	r3, [r7, #4]
	led_1_pin_config.GPIO_PinOPType = GPIO_OP_TYPE_PP; //?
 800023e:	2300      	movs	r3, #0
 8000240:	723b      	strb	r3, [r7, #8]
	led_1_pin_config.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000242:	2300      	movs	r3, #0
 8000244:	71fb      	strb	r3, [r7, #7]
	led_1_pin_config.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000246:	2300      	movs	r3, #0
 8000248:	71bb      	strb	r3, [r7, #6]

	led_1.GPIO_PinConfig = led_1_pin_config;
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	1d3a      	adds	r2, r7, #4
 8000250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000254:	6018      	str	r0, [r3, #0]
 8000256:	3304      	adds	r3, #4
 8000258:	7019      	strb	r1, [r3, #0]
	led_1.pGPIOx = GPIOB_BASEADDR;
 800025a:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <main+0x6c>)
 800025c:	60fb      	str	r3, [r7, #12]

	GPIO_Init(&led_1);
 800025e:	f107 030c 	add.w	r3, r7, #12
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f8fc 	bl	8000460 <GPIO_Init>




	 for (;;){
		GPIO_WriteToOutputPin(&led_1, GPIO_PIN_RESET);
 8000268:	f107 030c 	add.w	r3, r7, #12
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f9ae 	bl	80005d0 <GPIO_WriteToOutputPin>
		delay();
 8000274:	f7ff ffb8 	bl	80001e8 <delay>
		GPIO_WriteToOutputPin(&led_1, GPIO_PIN_SET);
 8000278:	f107 030c 	add.w	r3, r7, #12
 800027c:	2101      	movs	r1, #1
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f9a6 	bl	80005d0 <GPIO_WriteToOutputPin>
		delay();
 8000284:	f7ff ffb0 	bl	80001e8 <delay>
		GPIO_WriteToOutputPin(&led_1, GPIO_PIN_RESET);
 8000288:	e7ee      	b.n	8000268 <main+0x44>
 800028a:	bf00      	nop
 800028c:	40023830 	.word	0x40023830
 8000290:	40020c00 	.word	0x40020c00

08000294 <GPIO_PeriClockControl>:

#include "stm32f407xx_gpio_driver.h"
#include "stm32f407xx.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	460b      	mov	r3, r1
 800029e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 80002a0:	78fb      	ldrb	r3, [r7, #3]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d162      	bne.n	800036c <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4a64      	ldr	r2, [pc, #400]	; (800043c <GPIO_PeriClockControl+0x1a8>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d106      	bne.n	80002bc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002ae:	4b64      	ldr	r3, [pc, #400]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80002b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b2:	4a63      	ldr	r2, [pc, #396]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 80002ba:	e0b9      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a61      	ldr	r2, [pc, #388]	; (8000444 <GPIO_PeriClockControl+0x1b0>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d106      	bne.n	80002d2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002c4:	4b5e      	ldr	r3, [pc, #376]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c8:	4a5d      	ldr	r2, [pc, #372]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80002ca:	f043 0302 	orr.w	r3, r3, #2
 80002ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d0:	e0ae      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a5c      	ldr	r2, [pc, #368]	; (8000448 <GPIO_PeriClockControl+0x1b4>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002da:	4b59      	ldr	r3, [pc, #356]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002de:	4a58      	ldr	r2, [pc, #352]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80002e0:	f043 0304 	orr.w	r3, r3, #4
 80002e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e6:	e0a3      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a56      	ldr	r2, [pc, #344]	; (8000444 <GPIO_PeriClockControl+0x1b0>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d106      	bne.n	80002fe <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002f0:	4b53      	ldr	r3, [pc, #332]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a52      	ldr	r2, [pc, #328]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80002f6:	f043 0308 	orr.w	r3, r3, #8
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fc:	e098      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a52      	ldr	r2, [pc, #328]	; (800044c <GPIO_PeriClockControl+0x1b8>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d106      	bne.n	8000314 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000306:	4b4e      	ldr	r3, [pc, #312]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030a:	4a4d      	ldr	r2, [pc, #308]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 800030c:	f043 0310 	orr.w	r3, r3, #16
 8000310:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000312:	e08d      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a4e      	ldr	r2, [pc, #312]	; (8000450 <GPIO_PeriClockControl+0x1bc>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d106      	bne.n	800032a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800031c:	4b48      	ldr	r3, [pc, #288]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000320:	4a47      	ldr	r2, [pc, #284]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000328:	e082      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a49      	ldr	r2, [pc, #292]	; (8000454 <GPIO_PeriClockControl+0x1c0>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000332:	4b43      	ldr	r3, [pc, #268]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a42      	ldr	r2, [pc, #264]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 8000338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800033c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033e:	e077      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a45      	ldr	r2, [pc, #276]	; (8000458 <GPIO_PeriClockControl+0x1c4>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000348:	4b3d      	ldr	r3, [pc, #244]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a3c      	ldr	r2, [pc, #240]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 800034e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000354:	e06c      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a40      	ldr	r2, [pc, #256]	; (800045c <GPIO_PeriClockControl+0x1c8>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d168      	bne.n	8000430 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800035e:	4b38      	ldr	r3, [pc, #224]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a37      	ldr	r2, [pc, #220]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 8000364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000368:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036a:	e061      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a33      	ldr	r2, [pc, #204]	; (800043c <GPIO_PeriClockControl+0x1a8>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000374:	4b32      	ldr	r3, [pc, #200]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 8000376:	691b      	ldr	r3, [r3, #16]
 8000378:	4a31      	ldr	r2, [pc, #196]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 800037a:	f023 0301 	bic.w	r3, r3, #1
 800037e:	6113      	str	r3, [r2, #16]
}
 8000380:	e056      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a2f      	ldr	r2, [pc, #188]	; (8000444 <GPIO_PeriClockControl+0x1b0>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d106      	bne.n	8000398 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800038a:	4b2d      	ldr	r3, [pc, #180]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	4a2c      	ldr	r2, [pc, #176]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 8000390:	f023 0302 	bic.w	r3, r3, #2
 8000394:	6113      	str	r3, [r2, #16]
}
 8000396:	e04b      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a2b      	ldr	r2, [pc, #172]	; (8000448 <GPIO_PeriClockControl+0x1b4>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d106      	bne.n	80003ae <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80003a0:	4b27      	ldr	r3, [pc, #156]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	4a26      	ldr	r2, [pc, #152]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80003a6:	f023 0304 	bic.w	r3, r3, #4
 80003aa:	6113      	str	r3, [r2, #16]
}
 80003ac:	e040      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a24      	ldr	r2, [pc, #144]	; (8000444 <GPIO_PeriClockControl+0x1b0>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80003b8:	691b      	ldr	r3, [r3, #16]
 80003ba:	4a21      	ldr	r2, [pc, #132]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80003bc:	f023 0308 	bic.w	r3, r3, #8
 80003c0:	6113      	str	r3, [r2, #16]
}
 80003c2:	e035      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a21      	ldr	r2, [pc, #132]	; (800044c <GPIO_PeriClockControl+0x1b8>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80003ce:	691b      	ldr	r3, [r3, #16]
 80003d0:	4a1b      	ldr	r2, [pc, #108]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80003d2:	f023 0310 	bic.w	r3, r3, #16
 80003d6:	6113      	str	r3, [r2, #16]
}
 80003d8:	e02a      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a1c      	ldr	r2, [pc, #112]	; (8000450 <GPIO_PeriClockControl+0x1bc>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80003e4:	691b      	ldr	r3, [r3, #16]
 80003e6:	4a16      	ldr	r2, [pc, #88]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80003e8:	f023 0320 	bic.w	r3, r3, #32
 80003ec:	6113      	str	r3, [r2, #16]
}
 80003ee:	e01f      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a18      	ldr	r2, [pc, #96]	; (8000454 <GPIO_PeriClockControl+0x1c0>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80003fa:	691b      	ldr	r3, [r3, #16]
 80003fc:	4a10      	ldr	r2, [pc, #64]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 80003fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000402:	6113      	str	r3, [r2, #16]
}
 8000404:	e014      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a13      	ldr	r2, [pc, #76]	; (8000458 <GPIO_PeriClockControl+0x1c4>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 8000410:	691b      	ldr	r3, [r3, #16]
 8000412:	4a0b      	ldr	r2, [pc, #44]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 8000414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000418:	6113      	str	r3, [r2, #16]
}
 800041a:	e009      	b.n	8000430 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a0f      	ldr	r2, [pc, #60]	; (800045c <GPIO_PeriClockControl+0x1c8>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d105      	bne.n	8000430 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 8000426:	691b      	ldr	r3, [r3, #16]
 8000428:	4a05      	ldr	r2, [pc, #20]	; (8000440 <GPIO_PeriClockControl+0x1ac>)
 800042a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800042e:	6113      	str	r3, [r2, #16]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40020000 	.word	0x40020000
 8000440:	40023800 	.word	0x40023800
 8000444:	40020c00 	.word	0x40020c00
 8000448:	40020800 	.word	0x40020800
 800044c:	40021000 	.word	0x40021000
 8000450:	40021400 	.word	0x40021400
 8000454:	40021800 	.word	0x40021800
 8000458:	40021c00 	.word	0x40021c00
 800045c:	40022000 	.word	0x40022000

08000460 <GPIO_Init>:



// Implementieren Sie die weiteren Schritte. Denken Sie daran die Einträge eines Registers zurückzusetzen, bevor Sie einzelne Bits setzen
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	 //Anschalten der Clock
	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff10 	bl	8000294 <GPIO_PeriClockControl>


	 //Konfigurieren des OUTPUT-Modus
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	795b      	ldrb	r3, [r3, #5]
 8000478:	2b03      	cmp	r3, #3
 800047a:	d827      	bhi.n	80004cc <GPIO_Init+0x6c>
	 {
		 //RESET MODE REG =  INPUT
		 pGPIOHandle->pGPIOx->MODE_REG &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)) & ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) + 1);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	2101      	movs	r1, #1
 800048a:	4099      	lsls	r1, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	791b      	ldrb	r3, [r3, #4]
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	3301      	adds	r3, #1
 8000494:	2001      	movs	r0, #1
 8000496:	fa00 f303 	lsl.w	r3, r0, r3
 800049a:	430b      	orrs	r3, r1
 800049c:	43db      	mvns	r3, r3
 800049e:	4619      	mov	r1, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	400a      	ands	r2, r1
 80004a6:	601a      	str	r2, [r3, #0]

		 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	795b      	ldrb	r3, [r3, #5]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d10d      	bne.n	80004cc <GPIO_Init+0x6c>
			 {
			 pGPIOHandle->pGPIOx->MODE_REG |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber*2));
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	2101      	movs	r1, #1
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	4619      	mov	r1, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	430a      	orrs	r2, r1
 80004ca:	601a      	str	r2, [r3, #0]
	 }


	 //Konfigurieren des Output-Speeds
	 //RESET SPEED REGISTER TO DEFAULT
	 pGPIOHandle->pGPIOx->OUTPUT_SPEED &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)) & ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)+1);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	689a      	ldr	r2, [r3, #8]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	2101      	movs	r1, #1
 80004da:	4099      	lsls	r1, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	791b      	ldrb	r3, [r3, #4]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	3301      	adds	r3, #1
 80004e4:	2001      	movs	r0, #1
 80004e6:	fa00 f303 	lsl.w	r3, r0, r3
 80004ea:	430b      	orrs	r3, r1
 80004ec:	43db      	mvns	r3, r3
 80004ee:	4619      	mov	r1, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	400a      	ands	r2, r1
 80004f6:	609a      	str	r2, [r3, #8]

	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed & 0b01){
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	799b      	ldrb	r3, [r3, #6]
 80004fc:	f003 0301 	and.w	r3, r3, #1
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00d      	beq.n	8000520 <GPIO_Init+0xc0>
		 pGPIOHandle->pGPIOx->OUTPUT_SPEED |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)); //SPEED LOW BIT
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	689a      	ldr	r2, [r3, #8]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	2101      	movs	r1, #1
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	4619      	mov	r1, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	430a      	orrs	r2, r1
 800051e:	609a      	str	r2, [r3, #8]
	 }
	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed & 0b10)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	799b      	ldrb	r3, [r3, #6]
 8000524:	f003 0302 	and.w	r3, r3, #2
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00e      	beq.n	800054a <GPIO_Init+0xea>
	 {
		 pGPIOHandle->pGPIOx->OUTPUT_SPEED |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)+1); //SPEED HIGH BIT
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	689a      	ldr	r2, [r3, #8]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791b      	ldrb	r3, [r3, #4]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	3301      	adds	r3, #1
 800053a:	2101      	movs	r1, #1
 800053c:	fa01 f303 	lsl.w	r3, r1, r3
 8000540:	4619      	mov	r1, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	430a      	orrs	r2, r1
 8000548:	609a      	str	r2, [r3, #8]
	 }

	 //Konfigurieren des Pull-up/down Settings
	 //RESET PULL_UP_DOWN
	 pGPIOHandle->pGPIOx->PULL_UP_DOWN &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)) & ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) + 1);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68da      	ldr	r2, [r3, #12]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	2101      	movs	r1, #1
 8000558:	4099      	lsls	r1, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	3301      	adds	r3, #1
 8000562:	2001      	movs	r0, #1
 8000564:	fa00 f303 	lsl.w	r3, r0, r3
 8000568:	430b      	orrs	r3, r1
 800056a:	43db      	mvns	r3, r3
 800056c:	4619      	mov	r1, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	400a      	ands	r2, r1
 8000574:	60da      	str	r2, [r3, #12]

	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl & 0b01)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	79db      	ldrb	r3, [r3, #7]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	2b00      	cmp	r3, #0
 8000580:	d00d      	beq.n	800059e <GPIO_Init+0x13e>
	 {
		 pGPIOHandle->pGPIOx->PULL_UP_DOWN |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2)); //PUD LOW BIT
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	68da      	ldr	r2, [r3, #12]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2101      	movs	r1, #1
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	4619      	mov	r1, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	430a      	orrs	r2, r1
 800059c:	60da      	str	r2, [r3, #12]
	 }
	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl & 0b10)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	79db      	ldrb	r3, [r3, #7]
 80005a2:	f003 0302 	and.w	r3, r3, #2
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d00e      	beq.n	80005c8 <GPIO_Init+0x168>
	 {
		 pGPIOHandle->pGPIOx->PULL_UP_DOWN |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) + 1); //PUD HIGH BIT
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	68da      	ldr	r2, [r3, #12]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	3301      	adds	r3, #1
 80005b8:	2101      	movs	r1, #1
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	4619      	mov	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	60da      	str	r2, [r3, #12]
	 }


	 
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <GPIO_WriteToOutputPin>:
	return (uint16_t)(pGPIOx->INPUT_DATA_REG & 0xFFFF); //RETURN ONLY THE LOWER 16BIT
}

// Implementieren Sie die Funktionalität
void GPIO_WriteToOutputPin(GPIO_Handle_t *pGPIO_Handle, uint8_t Value)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
	if (Value){
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d00d      	beq.n	80005fe <GPIO_WriteToOutputPin+0x2e>
		pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG |= (1 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	695a      	ldr	r2, [r3, #20]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	4619      	mov	r1, r3
 80005ee:	2301      	movs	r3, #1
 80005f0:	408b      	lsls	r3, r1
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	430a      	orrs	r2, r1
 80005fa:	615a      	str	r2, [r3, #20]
	}else{
		pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG &= ~(1 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
	}
}
 80005fc:	e00d      	b.n	800061a <GPIO_WriteToOutputPin+0x4a>
		pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG &= ~(1 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	695a      	ldr	r2, [r3, #20]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	4619      	mov	r1, r3
 800060a:	2301      	movs	r3, #1
 800060c:	408b      	lsls	r3, r1
 800060e:	43db      	mvns	r3, r3
 8000610:	4619      	mov	r1, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	400a      	ands	r2, r1
 8000618:	615a      	str	r2, [r3, #20]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <GPIO_IRQHandling>:
	}

}

void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	// Abfrage und zurücksetzen des EXTI-PR bits
	if(EXTI->PR & ( 1 << PinNumber))
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <GPIO_IRQHandling+0x3c>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	79fa      	ldrb	r2, [r7, #7]
 8000638:	2101      	movs	r1, #1
 800063a:	fa01 f202 	lsl.w	r2, r1, r2
 800063e:	4013      	ands	r3, r2
 8000640:	2b00      	cmp	r3, #0
 8000642:	d009      	beq.n	8000658 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <GPIO_IRQHandling+0x3c>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	2101      	movs	r1, #1
 800064c:	fa01 f202 	lsl.w	r2, r1, r2
 8000650:	4611      	mov	r1, r2
 8000652:	4a04      	ldr	r2, [pc, #16]	; (8000664 <GPIO_IRQHandling+0x3c>)
 8000654:	430b      	orrs	r3, r1
 8000656:	6153      	str	r3, [r2, #20]
	}

}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	40013c00 	.word	0x40013c00

08000668 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490e      	ldr	r1, [pc, #56]	; (80006a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0b      	ldr	r4, [pc, #44]	; (80006b4 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000692:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000696:	f000 f811 	bl	80006bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069a:	f7ff fdc3 	bl	8000224 <main>

0800069e <LoopForever>:

LoopForever:
    b LoopForever
 800069e:	e7fe      	b.n	800069e <LoopForever>
  ldr   r0, =_estack
 80006a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006ac:	08000724 	.word	0x08000724
  ldr r2, =_sbss
 80006b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006b4:	2000001c 	.word	0x2000001c

080006b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC_IRQHandler>
	...

080006bc <__libc_init_array>:
 80006bc:	b570      	push	{r4, r5, r6, lr}
 80006be:	4e0d      	ldr	r6, [pc, #52]	; (80006f4 <__libc_init_array+0x38>)
 80006c0:	4c0d      	ldr	r4, [pc, #52]	; (80006f8 <__libc_init_array+0x3c>)
 80006c2:	1ba4      	subs	r4, r4, r6
 80006c4:	10a4      	asrs	r4, r4, #2
 80006c6:	2500      	movs	r5, #0
 80006c8:	42a5      	cmp	r5, r4
 80006ca:	d109      	bne.n	80006e0 <__libc_init_array+0x24>
 80006cc:	4e0b      	ldr	r6, [pc, #44]	; (80006fc <__libc_init_array+0x40>)
 80006ce:	4c0c      	ldr	r4, [pc, #48]	; (8000700 <__libc_init_array+0x44>)
 80006d0:	f000 f818 	bl	8000704 <_init>
 80006d4:	1ba4      	subs	r4, r4, r6
 80006d6:	10a4      	asrs	r4, r4, #2
 80006d8:	2500      	movs	r5, #0
 80006da:	42a5      	cmp	r5, r4
 80006dc:	d105      	bne.n	80006ea <__libc_init_array+0x2e>
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006e4:	4798      	blx	r3
 80006e6:	3501      	adds	r5, #1
 80006e8:	e7ee      	b.n	80006c8 <__libc_init_array+0xc>
 80006ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006ee:	4798      	blx	r3
 80006f0:	3501      	adds	r5, #1
 80006f2:	e7f2      	b.n	80006da <__libc_init_array+0x1e>
 80006f4:	0800071c 	.word	0x0800071c
 80006f8:	0800071c 	.word	0x0800071c
 80006fc:	0800071c 	.word	0x0800071c
 8000700:	08000720 	.word	0x08000720

08000704 <_init>:
 8000704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000706:	bf00      	nop
 8000708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070a:	bc08      	pop	{r3}
 800070c:	469e      	mov	lr, r3
 800070e:	4770      	bx	lr

08000710 <_fini>:
 8000710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000712:	bf00      	nop
 8000714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000716:	bc08      	pop	{r3}
 8000718:	469e      	mov	lr, r3
 800071a:	4770      	bx	lr
