
P1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000016c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000314  0800031c  0001031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000314  08000314  0001031c  2**0
                  CONTENTS
  4 .ARM          00000000  08000314  08000314  0001031c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000314  0800031c  0001031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000314  08000314  00010314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800031c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800031c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001031c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000ec  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000094  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  000104d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00010520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001170  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000044a  00000000  00000000  000116c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003ef8  00000000  00000000  00011b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015a0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000080  00000000  00000000  00015a88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080002fc 	.word	0x080002fc

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080002fc 	.word	0x080002fc

080001e8 <delay>:

#define GPIOB_ODR 0x14U



void delay(){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0

	for (uint32_t i = 0; i < 80000; ++i) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e003      	b.n	80001fc <delay+0x14>
		asm("nop");
 80001f4:	bf00      	nop
	for (uint32_t i = 0; i < 80000; ++i) {
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	3301      	adds	r3, #1
 80001fa:	607b      	str	r3, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d9f7      	bls.n	80001f4 <delay+0xc>
	}

}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	0001387f 	.word	0x0001387f

08000214 <main>:
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	//ENABLE CLOCK für FPIOB
	*((volatile uint32_t*)(AHB1ENR+GPIOBEN)) |=(1 << BIT3);
 8000218:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <main+0x40>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <main+0x40>)
 800021e:	f043 0308 	orr.w	r3, r3, #8
 8000222:	6013      	str	r3, [r2, #0]
	//CLEAR MODE -> default state ist input 01-> ist output normal
	*((volatile uint32_t*)(GPIOB+GPIOB_MODER)) |= (0b01010000000000000000000000000000); //PB7 und PB0 sind die led angeschlossen somit BIT15 = 1 BIT 16 = 0 für PB7 und BIT1 = 0 und BIT0 = 1 für PB0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <main+0x44>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0b      	ldr	r2, [pc, #44]	; (8000258 <main+0x44>)
 800022a:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800022e:	6013      	str	r3, [r2, #0]


	for(;;){

		delay();
 8000230:	f7ff ffda 	bl	80001e8 <delay>

		*((volatile uint32_t*)(GPIOB+GPIOB_ODR)) &= ~(1 << BIT15) & ~(1 << BIT14);
 8000234:	4b09      	ldr	r3, [pc, #36]	; (800025c <main+0x48>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a08      	ldr	r2, [pc, #32]	; (800025c <main+0x48>)
 800023a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800023e:	6013      	str	r3, [r2, #0]
		delay();
 8000240:	f7ff ffd2 	bl	80001e8 <delay>
		*((volatile uint32_t*)(GPIOB+GPIOB_ODR)) |= (1 << BIT15) | (1 << BIT14);
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <main+0x48>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a04      	ldr	r2, [pc, #16]	; (800025c <main+0x48>)
 800024a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800024e:	6013      	str	r3, [r2, #0]
		delay();
 8000250:	e7ee      	b.n	8000230 <main+0x1c>
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020c00 	.word	0x40020c00
 800025c:	40020c14 	.word	0x40020c14

08000260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000262:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <LoopForever+0x6>)
  ldr r1, =_edata
 8000266:	490e      	ldr	r1, [pc, #56]	; (80002a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000268:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <LoopForever+0xe>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800026c:	e002      	b.n	8000274 <LoopCopyDataInit>

0800026e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000272:	3304      	adds	r3, #4

08000274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000278:	d3f9      	bcc.n	800026e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800027c:	4c0b      	ldr	r4, [pc, #44]	; (80002ac <LoopForever+0x16>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000280:	e001      	b.n	8000286 <LoopFillZerobss>

08000282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000284:	3204      	adds	r2, #4

08000286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000288:	d3fb      	bcc.n	8000282 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800028a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800028e:	f000 f811 	bl	80002b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000292:	f7ff ffbf 	bl	8000214 <main>

08000296 <LoopForever>:

LoopForever:
    b LoopForever
 8000296:	e7fe      	b.n	8000296 <LoopForever>
  ldr   r0, =_estack
 8000298:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a4:	0800031c 	.word	0x0800031c
  ldr r2, =_sbss
 80002a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC_IRQHandler>
	...

080002b4 <__libc_init_array>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	4e0d      	ldr	r6, [pc, #52]	; (80002ec <__libc_init_array+0x38>)
 80002b8:	4c0d      	ldr	r4, [pc, #52]	; (80002f0 <__libc_init_array+0x3c>)
 80002ba:	1ba4      	subs	r4, r4, r6
 80002bc:	10a4      	asrs	r4, r4, #2
 80002be:	2500      	movs	r5, #0
 80002c0:	42a5      	cmp	r5, r4
 80002c2:	d109      	bne.n	80002d8 <__libc_init_array+0x24>
 80002c4:	4e0b      	ldr	r6, [pc, #44]	; (80002f4 <__libc_init_array+0x40>)
 80002c6:	4c0c      	ldr	r4, [pc, #48]	; (80002f8 <__libc_init_array+0x44>)
 80002c8:	f000 f818 	bl	80002fc <_init>
 80002cc:	1ba4      	subs	r4, r4, r6
 80002ce:	10a4      	asrs	r4, r4, #2
 80002d0:	2500      	movs	r5, #0
 80002d2:	42a5      	cmp	r5, r4
 80002d4:	d105      	bne.n	80002e2 <__libc_init_array+0x2e>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002dc:	4798      	blx	r3
 80002de:	3501      	adds	r5, #1
 80002e0:	e7ee      	b.n	80002c0 <__libc_init_array+0xc>
 80002e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e6:	4798      	blx	r3
 80002e8:	3501      	adds	r5, #1
 80002ea:	e7f2      	b.n	80002d2 <__libc_init_array+0x1e>
 80002ec:	08000314 	.word	0x08000314
 80002f0:	08000314 	.word	0x08000314
 80002f4:	08000314 	.word	0x08000314
 80002f8:	08000318 	.word	0x08000318

080002fc <_init>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr

08000308 <_fini>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr
